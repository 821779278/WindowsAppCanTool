#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.42000
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace WindowsCanToolApp
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="CANTool")]
	public partial class LINQDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region 可扩展性方法定义
    partial void OnCreated();
    partial void InsertSendMessage(SendMessage instance);
    partial void UpdateSendMessage(SendMessage instance);
    partial void DeleteSendMessage(SendMessage instance);
    partial void InsertSendSignal(SendSignal instance);
    partial void UpdateSendSignal(SendSignal instance);
    partial void DeleteSendSignal(SendSignal instance);
    #endregion
		
		public LINQDataContext() : 
				base(global::WindowsCanToolApp.Properties.Settings.Default.CANToolConnectionString1, mappingSource)
		{
			OnCreated();
		}
		
		public LINQDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public LINQDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public LINQDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public LINQDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<SendMessage> SendMessage
		{
			get
			{
				return this.GetTable<SendMessage>();
			}
		}
		
		public System.Data.Linq.Table<SendSignal> SendSignal
		{
			get
			{
				return this.GetTable<SendSignal>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SendMessage")]
	public partial class SendMessage : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _BO_;
		
		private int _ID;
		
		private string _Message_Name;
		
		private char _Separator;
		
		private int _DLC;
		
		private string _Node_Name;
		
		private EntitySet<SendSignal> _SendSignal;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBO_Changing(string value);
    partial void OnBO_Changed();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnMessage_NameChanging(string value);
    partial void OnMessage_NameChanged();
    partial void OnSeparatorChanging(char value);
    partial void OnSeparatorChanged();
    partial void OnDLCChanging(int value);
    partial void OnDLCChanged();
    partial void OnNode_NameChanging(string value);
    partial void OnNode_NameChanged();
    #endregion
		
		public SendMessage()
		{
			this._SendSignal = new EntitySet<SendSignal>(new Action<SendSignal>(this.attach_SendSignal), new Action<SendSignal>(this.detach_SendSignal));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BO_", DbType="VarChar(32) NOT NULL", CanBeNull=false)]
		public string BO_
		{
			get
			{
				return this._BO_;
			}
			set
			{
				if ((this._BO_ != value))
				{
					this.OnBO_Changing(value);
					this.SendPropertyChanging();
					this._BO_ = value;
					this.SendPropertyChanged("BO_");
					this.OnBO_Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Message_Name", DbType="VarChar(32) NOT NULL", CanBeNull=false)]
		public string Message_Name
		{
			get
			{
				return this._Message_Name;
			}
			set
			{
				if ((this._Message_Name != value))
				{
					this.OnMessage_NameChanging(value);
					this.SendPropertyChanging();
					this._Message_Name = value;
					this.SendPropertyChanged("Message_Name");
					this.OnMessage_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Separator", DbType="Char(1) NOT NULL")]
		public char Separator
		{
			get
			{
				return this._Separator;
			}
			set
			{
				if ((this._Separator != value))
				{
					this.OnSeparatorChanging(value);
					this.SendPropertyChanging();
					this._Separator = value;
					this.SendPropertyChanged("Separator");
					this.OnSeparatorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DLC", DbType="Int NOT NULL")]
		public int DLC
		{
			get
			{
				return this._DLC;
			}
			set
			{
				if ((this._DLC != value))
				{
					this.OnDLCChanging(value);
					this.SendPropertyChanging();
					this._DLC = value;
					this.SendPropertyChanged("DLC");
					this.OnDLCChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Node_Name", DbType="VarChar(32) NOT NULL", CanBeNull=false)]
		public string Node_Name
		{
			get
			{
				return this._Node_Name;
			}
			set
			{
				if ((this._Node_Name != value))
				{
					this.OnNode_NameChanging(value);
					this.SendPropertyChanging();
					this._Node_Name = value;
					this.SendPropertyChanged("Node_Name");
					this.OnNode_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SendMessage_SendSignal", Storage="_SendSignal", ThisKey="ID", OtherKey="ID")]
		public EntitySet<SendSignal> SendSignal
		{
			get
			{
				return this._SendSignal;
			}
			set
			{
				this._SendSignal.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SendSignal(SendSignal entity)
		{
			this.SendPropertyChanging();
			entity.SendMessage = this;
		}
		
		private void detach_SendSignal(SendSignal entity)
		{
			this.SendPropertyChanging();
			entity.SendMessage = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SendSignal")]
	public partial class SendSignal : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _SG_;
		
		private string _Signal_Name;
		
		private char _Separator;
		
		private string _Bit_Format;
		
		private string @__A_B_;
		
		private string _C_D;
		
		private string _Physical_Unit;
		
		private string _Node_Name;
		
		private string _Signal_Value;
		
		private int _ID;
		
		private EntityRef<SendMessage> _SendMessage;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSG_Changing(string value);
    partial void OnSG_Changed();
    partial void OnSignal_NameChanging(string value);
    partial void OnSignal_NameChanged();
    partial void OnSeparatorChanging(char value);
    partial void OnSeparatorChanged();
    partial void OnBit_FormatChanging(string value);
    partial void OnBit_FormatChanged();
    partial void On_A_B_Changing(string value);
    partial void On_A_B_Changed();
    partial void OnC_DChanging(string value);
    partial void OnC_DChanged();
    partial void OnPhysical_UnitChanging(string value);
    partial void OnPhysical_UnitChanged();
    partial void OnNode_NameChanging(string value);
    partial void OnNode_NameChanged();
    partial void OnSignal_ValueChanging(string value);
    partial void OnSignal_ValueChanged();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    #endregion
		
		public SendSignal()
		{
			this._SendMessage = default(EntityRef<SendMessage>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SG_", DbType="VarChar(32) NOT NULL", CanBeNull=false)]
		public string SG_
		{
			get
			{
				return this._SG_;
			}
			set
			{
				if ((this._SG_ != value))
				{
					this.OnSG_Changing(value);
					this.SendPropertyChanging();
					this._SG_ = value;
					this.SendPropertyChanged("SG_");
					this.OnSG_Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Signal_Name", DbType="VarChar(32) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Signal_Name
		{
			get
			{
				return this._Signal_Name;
			}
			set
			{
				if ((this._Signal_Name != value))
				{
					this.OnSignal_NameChanging(value);
					this.SendPropertyChanging();
					this._Signal_Name = value;
					this.SendPropertyChanged("Signal_Name");
					this.OnSignal_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Separator", DbType="Char(1) NOT NULL")]
		public char Separator
		{
			get
			{
				return this._Separator;
			}
			set
			{
				if ((this._Separator != value))
				{
					this.OnSeparatorChanging(value);
					this.SendPropertyChanging();
					this._Separator = value;
					this.SendPropertyChanged("Separator");
					this.OnSeparatorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Bit_Format", DbType="VarChar(12) NOT NULL", CanBeNull=false)]
		public string Bit_Format
		{
			get
			{
				return this._Bit_Format;
			}
			set
			{
				if ((this._Bit_Format != value))
				{
					this.OnBit_FormatChanging(value);
					this.SendPropertyChanging();
					this._Bit_Format = value;
					this.SendPropertyChanged("Bit_Format");
					this.OnBit_FormatChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[(A,B)]", Storage="__A_B_", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string _A_B_
		{
			get
			{
				return this.@__A_B_;
			}
			set
			{
				if ((this.@__A_B_ != value))
				{
					this.On_A_B_Changing(value);
					this.SendPropertyChanging();
					this.@__A_B_ = value;
					this.SendPropertyChanged("_A_B_");
					this.On_A_B_Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[C|D]", Storage="_C_D", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string C_D
		{
			get
			{
				return this._C_D;
			}
			set
			{
				if ((this._C_D != value))
				{
					this.OnC_DChanging(value);
					this.SendPropertyChanging();
					this._C_D = value;
					this.SendPropertyChanged("C_D");
					this.OnC_DChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Physical_Unit", DbType="Char(32) NOT NULL", CanBeNull=false)]
		public string Physical_Unit
		{
			get
			{
				return this._Physical_Unit;
			}
			set
			{
				if ((this._Physical_Unit != value))
				{
					this.OnPhysical_UnitChanging(value);
					this.SendPropertyChanging();
					this._Physical_Unit = value;
					this.SendPropertyChanged("Physical_Unit");
					this.OnPhysical_UnitChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Node_Name", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Node_Name
		{
			get
			{
				return this._Node_Name;
			}
			set
			{
				if ((this._Node_Name != value))
				{
					this.OnNode_NameChanging(value);
					this.SendPropertyChanging();
					this._Node_Name = value;
					this.SendPropertyChanged("Node_Name");
					this.OnNode_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Signal_Value", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string Signal_Value
		{
			get
			{
				return this._Signal_Value;
			}
			set
			{
				if ((this._Signal_Value != value))
				{
					this.OnSignal_ValueChanging(value);
					this.SendPropertyChanging();
					this._Signal_Value = value;
					this.SendPropertyChanged("Signal_Value");
					this.OnSignal_ValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL")]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					if (this._SendMessage.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SendMessage_SendSignal", Storage="_SendMessage", ThisKey="ID", OtherKey="ID", IsForeignKey=true)]
		public SendMessage SendMessage
		{
			get
			{
				return this._SendMessage.Entity;
			}
			set
			{
				SendMessage previousValue = this._SendMessage.Entity;
				if (((previousValue != value) 
							|| (this._SendMessage.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SendMessage.Entity = null;
						previousValue.SendSignal.Remove(this);
					}
					this._SendMessage.Entity = value;
					if ((value != null))
					{
						value.SendSignal.Add(this);
						this._ID = value.ID;
					}
					else
					{
						this._ID = default(int);
					}
					this.SendPropertyChanged("SendMessage");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
